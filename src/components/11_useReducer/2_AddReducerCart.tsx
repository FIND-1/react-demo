/*
* Ë¥≠Áâ©ËΩ¶Ê°à‰æã
* */
import React, {useCallback, useReducer} from 'react';

// üçé Ê∞¥ÊûúÊï∞ÊçÆÁ±ªÂûãÂÆö‰πâ
interface FruitItem {
    id: number;
    name: string;
    price: number;
    count: number;
    isEdit: boolean;
}

// ÂàùÂßãÂåñÊï∞ÊçÆÔºö‰∏âÁßçÊ∞¥Êûú
const initialFruits: FruitItem[] = [
    {id: 1, name: 'üçìËçâËéì', price: 5.5, count: 1, isEdit: false},
    {id: 2, name: 'üçå È¶ôËïâ', price: 3.2, count: 1, isEdit: false},
    {id: 3, name: 'üçá Ëë°ËêÑ', price: 12.0, count: 1, isEdit: false},
];

// üîß Action Á±ªÂûãÔºàÊõ¥Á≤æÁ°ÆÁöÑËÅîÂêàÁ±ªÂûãÔºâ
type FruitAction =
    | { type: 'ADD'; id: number }
    | { type: 'SUB'; id: number }
    | { type: 'DELETE'; id: number }
    | { type: 'EDIT'; id: number }
    | { type: 'UPDATE_NAME'; id: number; newName: string };
// Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÊõøÊç¢Êï∞ÁªÑ‰∏≠ÊåáÂÆö id ÁöÑ item
const updateItem = (
    items: FruitItem[],
    id: number,
    updater: (item: FruitItem) => FruitItem
): FruitItem[] => {
    return items.map(item => (item.id === id ? updater(item) : item));
};

// Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÂà†Èô§ÊåáÂÆö id ÁöÑ item
const deleteItem = (items: FruitItem[], id: number): FruitItem[] => {
    return items.filter(item => item.id !== id);
};

function fruitReducer(state: FruitItem[], action: FruitAction): FruitItem[] {
    switch (action.type) {
        case 'ADD':
            return updateItem(state, action.id, item => ({ ...item, count: item.count + 1 }));

        case 'SUB':
            return updateItem(state, action.id, item =>
                item.count > 1 ? { ...item, count: item.count - 1 } : item
            );

        case 'DELETE':
            return deleteItem(state, action.id);

        case 'EDIT':
            return updateItem(state, action.id, item => ({
                ...item,
                isEdit: !item.isEdit,
            }));

        case 'UPDATE_NAME': {
            const newName = action.newName.trim();
            if (!newName) return state;
            return updateItem(state, action.id, item => ({
                ...item,
                name: newName,
                isEdit: false,
            }));
        }

        default:
            return state;
    }
}


// üõí ‰∏ªÁªÑ‰ª∂
const AddReducerCart: React.FC = () => {
    const [fruits, dispatch] = useReducer(fruitReducer, initialFruits);

    // ‚úÖ ‰ΩøÁî® useCallback ÁºìÂ≠òÂõûË∞ÉÂáΩÊï∞
    const handleAdd = useCallback((id: number) => {
        dispatch({type: 'ADD', id});
    }, []);

    const handleSub = useCallback((id: number) => {
        dispatch({type: 'SUB', id});
    }, []);

    const handleDelete = useCallback((id: number) => {
        if (window.confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™Ê∞¥ÊûúÂêóÔºü')) {
            dispatch({type: 'DELETE', id});
        }
    }, []);

    const handleEdit = useCallback((id: number) => {
        dispatch({type: 'EDIT', id});
    }, []);

    const handleUpdateName = useCallback((id: number, newName: string) => {
        dispatch({type: 'UPDATE_NAME', id, newName});
    }, []);

    // üí∞ ËÆ°ÁÆóÊÄª‰ª∑
    const totalPrice = fruits.reduce((sum, item) => sum + item.price * item.count, 0);

    return (
        <div style={{padding: '20px', fontFamily: 'Arial, sans-serif'}}>
            <h2>useReducer --üõí Ê∞¥ÊûúË¥≠Áâ©ËΩ¶</h2>
            <table
                cellPadding={8}
                cellSpacing={0}
                width={700}
                border={1}
                style={{
                    borderCollapse: 'collapse',
                    textAlign: 'center',
                    marginTop: '10px',
                }}
            >
                <thead>
                <tr style={{backgroundColor: '#f0f8ff'}}>
                    <th>Ê∞¥Êûú</th>
                    <th>Âçï‰ª∑ (ÂÖÉ)</th>
                    <th>Êï∞Èáè</th>
                    <th>Êìç‰Ωú</th>
                </tr>
                </thead>
                <tbody>
                {fruits.map((item) => (
                    <tr key={item.id} style={{height: '50px'}}>
                        <td align="center">
                            {item.isEdit ? (
                                <input
                                    type="text"
                                    defaultValue={item.name} // ‚úÖ ‰ΩøÁî® defaultValueÔºåÂÖÅËÆ∏Ëá™Áî±ËæìÂÖ•
                                    onKeyPress={(e) => {
                                        if (e.key === 'Enter') {
                                            const newName = e.currentTarget.value.trim();
                                            if (newName) {
                                                handleUpdateName(item.id, newName);
                                            }
                                        }
                                    }}
                                    onBlur={(e) => {
                                        const newName = e.currentTarget.value.trim();
                                        if (newName) {
                                            handleUpdateName(item.id, newName);
                                        }
                                    }}
                                    onKeyDown={(e) => {
                                        if (e.key === 'Escape') {
                                            // ÂèñÊ∂àÁºñËæëÔºöÊÅ¢Â§çÂéüÂÄºÂπ∂ÈÄÄÂá∫ÁºñËæëÊ®°Âºè
                                            e.currentTarget.value = item.name; // ÊÅ¢Â§çËæìÂÖ•Ê°ÜÂÜÖÂÆπ
                                            handleEdit(item.id); // ÈÄÄÂá∫ÁºñËæë
                                        }
                                    }}
                                    autoFocus
                                    style={{padding: '4px', width: '80px', fontSize: '14px'}}
                                />
                            ) : (
                                <span>{item.name}</span>
                            )}
                        </td>
                        <td align="center">{item.price.toFixed(2)}</td>
                        <td align="center">
                            <button
                                onClick={() => handleSub(item.id)}
                                disabled={item.count <= 1}
                                style={{
                                    width: '24px',
                                    height: '24px',
                                    margin: '0 5px',
                                    background: item.count <= 1 ? '#ccc' : '#dc3545',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '50%',
                                    cursor: item.count <= 1 ? 'not-allowed' : 'pointer',
                                }}
                            >
                                ‚àí
                            </button>
                            <span style={{fontWeight: 'bold'}}>{item.count}</span>
                            <button
                                onClick={() => handleAdd(item.id)}
                                style={{
                                    width: '24px',
                                    height: '24px',
                                    margin: '0 5px',
                                    background: '#28a745',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '50%',
                                    cursor: 'pointer',
                                }}
                            >
                                +
                            </button>
                        </td>
                        <td align="center">
                            <button
                                onClick={() => handleEdit(item.id)}
                                style={{
                                    padding: '4px 8px',
                                    marginRight: '8px',
                                    background: '#ffc107',
                                    border: 'none',
                                    borderRadius: '4px',
                                    cursor: 'pointer',
                                }}
                            >
                                {item.isEdit ? '‰øùÂ≠ò' : 'ÁºñËæë'}
                            </button>
                            <button
                                onClick={() => handleDelete(item.id)}
                                style={{
                                    padding: '4px 8px',
                                    background: '#dc3545',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '4px',
                                    cursor: 'pointer',
                                }}
                            >
                                Âà†Èô§
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
                <tfoot>
                <tr>
                    <td colSpan={3}></td>
                    <td align="center" style={{fontWeight: 'bold', fontSize: '16px'}}>
                        ÊÄª‰ª∑: ¬•{totalPrice.toFixed(2)}
                    </td>
                </tr>
                </tfoot>
            </table>

            {fruits.length === 0 && (
                <p style={{color: '#999', marginTop: '20px'}}>üõí Ë¥≠Áâ©ËΩ¶Á©∫Á©∫Â¶Ç‰πü</p>
            )}
        </div>
    );
};

export default AddReducerCart;